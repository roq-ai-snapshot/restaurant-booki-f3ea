generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model chef {
  id               String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id          String     @db.Uuid
  restaurant_id    String     @db.Uuid
  specialty        String?    @db.VarChar(50)
  experience_years Int?
  working_hours    String?    @db.VarChar(50)
  off_days         String?    @db.VarChar(50)
  created_at       DateTime   @default(now()) @db.Timestamp(6)
  updated_at       DateTime   @default(now()) @db.Timestamp(6)
  restaurant       restaurant @relation(fields: [restaurant_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user             user       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model invitation {
  id                                String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  status                            String     @db.VarChar(20)
  sender_id                         String     @db.Uuid
  receiver_id                       String     @db.Uuid
  restaurant_id                     String     @db.Uuid
  created_at                        DateTime   @default(now()) @db.Timestamp(6)
  updated_at                        DateTime   @default(now()) @db.Timestamp(6)
  user_invitation_receiver_idTouser user       @relation("invitation_receiver_idTouser", fields: [receiver_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  restaurant                        restaurant @relation(fields: [restaurant_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user_invitation_sender_idTouser   user       @relation("invitation_sender_idTouser", fields: [sender_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model menu {
  id            String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String     @db.VarChar(50)
  description   String?    @db.VarChar
  price         Int?
  category      String?    @db.VarChar(50)
  availability  Boolean?
  restaurant_id String     @db.Uuid
  created_at    DateTime   @default(now()) @db.Timestamp(6)
  updated_at    DateTime   @default(now()) @db.Timestamp(6)
  restaurant    restaurant @relation(fields: [restaurant_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model reservation {
  id            String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date          DateTime   @db.Date
  time          DateTime   @db.Time(6)
  guest_count   Int?
  table_number  Int?
  status        String?    @db.VarChar(20)
  user_id       String     @db.Uuid
  restaurant_id String     @db.Uuid
  created_at    DateTime   @default(now()) @db.Timestamp(6)
  updated_at    DateTime   @default(now()) @db.Timestamp(6)
  restaurant    restaurant @relation(fields: [restaurant_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user          user       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model restaurant {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?       @db.VarChar
  address     String?       @db.VarChar(100)
  city        String?       @db.VarChar(50)
  state       String?       @db.VarChar(50)
  zip_code    String?       @db.VarChar(10)
  name        String        @db.VarChar(255)
  created_at  DateTime      @default(now()) @db.Timestamp(6)
  updated_at  DateTime      @default(now()) @db.Timestamp(6)
  user_id     String        @db.Uuid
  tenant_id   String        @db.VarChar(255)
  chef        chef[]
  invitation  invitation[]
  menu        menu[]
  reservation reservation[]
  user        user          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id                                      String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                                   String        @unique @db.VarChar(255)
  firstName                               String?       @db.VarChar(255)
  lastName                                String?       @db.VarChar(255)
  roq_user_id                             String        @db.VarChar(255)
  tenant_id                               String        @db.VarChar(255)
  created_at                              DateTime      @default(now()) @db.Timestamp(6)
  updated_at                              DateTime      @default(now()) @db.Timestamp(6)
  chef                                    chef[]
  invitation_invitation_receiver_idTouser invitation[]  @relation("invitation_receiver_idTouser")
  invitation_invitation_sender_idTouser   invitation[]  @relation("invitation_sender_idTouser")
  reservation                             reservation[]
  restaurant                              restaurant[]
}
